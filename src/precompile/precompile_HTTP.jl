function _precompile_4()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(HTTP.idle!, (HTTP.Connection{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(HTTP.onheadervalue, (HTTP.Parser, HTTP.Request, Array{UInt8, 1}, Int64, Int64, Bool, String, Base.RefValue{String},))
    precompile(HTTP.Cookies.domainmatch, (HTTP.Cookies.Cookie, String,))
    precompile(HTTP.write, (HTTP.FIFOBuffer, UInt8,))
    precompile(HTTP.convert, (Type{HTTP.Method}, Int64,))
    precompile(HTTP.escapeHTML, (String,))
    precompile(HTTP.getconnections, (Type{HTTP.https}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.SubString{String},))
    precompile(HTTP.Cookies.readcookies, (Base.Dict{String, String}, String,))
    precompile(HTTP.http_parse_host_char, (HTTP.http_host_state, Char,))
    precompile(HTTP.onheadervalue, (HTTP.Parser, Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.http_should_keep_alive, (HTTP.Parser, HTTP.Request,))
    precompile(HTTP.getconnections, (Type{HTTP.http}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.SubString{String},))
    precompile(HTTP.Cookies.validcookiepathbyte, (Char,))
    precompile(HTTP.parseurlchar, (UInt8, Char, Bool,))
    precompile(HTTP.onbody, (HTTP.Request, Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.printuri, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, String, String, String, String, String, String,))
    precompile(HTTP.Type, (Type{HTTP.Client}, Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.RequestOptions,))
    precompile(HTTP.getindex, (Array{UInt8, 1}, HTTP.Offset,))
    precompile(HTTP.nextbyte, (String, Int64, Int64,))
    precompile(HTTP.request, (HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, HTTP.Request, HTTP.RequestOptions, HTTP.Connection{MbedTLS.SSLContext}, Array{HTTP.Response, 1}, Bool, Bool,))
    precompile(HTTP.request, (HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, HTTP.Request, HTTP.RequestOptions, HTTP.Connection{Base.TCPSocket}, Array{HTTP.Response, 1}, Bool, Bool,))
    precompile(HTTP.headers, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Response,))
    precompile(HTTP.request, (HTTP.Client{Base.TTY}, HTTP.Request, HTTP.RequestOptions, HTTP.Connection{Base.TCPSocket}, Array{HTTP.Response, 1}, Bool, Bool,))
    precompile(HTTP.headers, (Base.TCPSocket, HTTP.Response,))
    precompile(HTTP.http_message_needs_eof, (HTTP.Parser, HTTP.Response,))
    precompile(HTTP.read, (HTTP.FIFOBuffer, Int64,))
    precompile(HTTP.onbody, (HTTP.Response, Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.idle!, (HTTP.Connection{Base.TCPSocket},))
    precompile(HTTP.isjson, (Array{UInt8, 1}, UInt64, Int64,))
    precompile(HTTP.Type, (Type{String}, HTTP.FIFOBuffer,))
    precompile(HTTP.get, (HTTP.RequestOptions, Symbol, Int64,))
    precompile(HTTP.restofstring, (Array{UInt8, 1}, UInt64, Int64,))
    precompile(HTTP.readavailable, (HTTP.FIFOBuffer,))
    precompile(HTTP.isjson, (Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.splitpath, (HTTP.URI, Int64,))
    precompile(HTTP.setconnection!, (Type{HTTP.http}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}, HTTP.Connection{Base.TCPSocket},))
    precompile(HTTP.isjson, (String, Int64, Int64,))
    precompile(HTTP.nextbyte, (Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.iscompressed, (Array{UInt8, 1},))
    precompile(HTTP.setconnection!, (Type{HTTP.https}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}, HTTP.Connection{MbedTLS.SSLContext},))
    precompile(HTTP.port, (HTTP.URI,))
    precompile(HTTP.Type, (Type{HTTP.Response},))
    precompile(HTTP.escape, (Base.Dict{String, String},))
    precompile(HTTP.serve, (HTTP.Server{HTTP.http, Base.TTY}, Base.IPv4, Int64, Bool,))
    precompile(HTTP.restofstring, (Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.process!, (HTTP.Client{Base.TTY}, HTTP.Connection{MbedTLS.SSLContext}, HTTP.RequestOptions, String, HTTP.Method, HTTP.Response, Base.RefValue{Float64}, Bool, Bool,))
    precompile(HTTP.idle!, (HTTP.Connection{MbedTLS.SSLContext},))
    precompile(HTTP.Cookies.isCookieDomainName, (String,))
    precompile(HTTP.process!, (HTTP.Client{Base.TTY}, HTTP.Connection{Base.TCPSocket}, HTTP.RequestOptions, String, HTTP.Method, HTTP.Response, Base.RefValue{Float64}, Bool, Bool,))
    precompile(HTTP.setconnection!, (Type{HTTP.https}, HTTP.Client{Base.TTY}, Base.SubString{String}, HTTP.Connection{MbedTLS.SSLContext},))
    precompile(HTTP.Cookies.isIP, (String,))
    precompile(HTTP.process!, (HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, HTTP.Connection{Base.TCPSocket}, HTTP.RequestOptions, String, HTTP.Method, HTTP.Response, Base.RefValue{Float64}, Bool, Bool,))
    precompile(HTTP.restofstring, (String, Int64, Int64,))
    precompile(HTTP.Cookies.hash, (HTTP.Cookies.Cookie, UInt64,))
    precompile(HTTP.splithostport, (String,))
    precompile(HTTP.byteequal, (Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{UInt8, 1}, Int64,))
    precompile(HTTP.request, (HTTP.Client{Base.TTY}, HTTP.Request, HTTP.RequestOptions, HTTP.Connection{MbedTLS.SSLContext}, Array{HTTP.Response, 1}, Bool, Bool,))
    precompile(HTTP.Type, (Type{HTTP.Request},))
    precompile(HTTP.Cookies.string, (String, Array{HTTP.Cookies.Cookie, 1}, Bool,))
    precompile(HTTP.nextbyte, (Array{UInt8, 1}, UInt64, Int64,))
    precompile(HTTP.process!, (HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, HTTP.Connection{MbedTLS.SSLContext}, HTTP.RequestOptions, String, HTTP.Method, HTTP.Response, Base.RefValue{Float64}, Bool, Bool,))
    precompile(HTTP.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Method,))
    precompile(HTTP.defaultheaders, (Type{HTTP.Response},))
    precompile(HTTP.http_parser_parse_url, (Array{UInt8, 1}, Int64, Int64, Bool,))
    precompile(HTTP.update!, (HTTP.RequestOptions, HTTP.RequestOptions,))
    precompile(HTTP.Type, (Type{HTTP.Client}, Base.TTY, HTTP.RequestOptions,))
    precompile(HTTP.headers, (Base.TTY, HTTP.Response,))
    precompile(HTTP.setconnection!, (Type{HTTP.http}, HTTP.Client{Base.TTY}, Base.SubString{String}, HTTP.Connection{Base.TCPSocket},))
    precompile(HTTP.escape, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, Array{String, 1},))
    precompile(HTTP.Type, (Type{HTTP.FIFOBuffer}, Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(HTTP.headers, (MbedTLS.SSLContext, HTTP.Request,))
    precompile(HTTP.ismatch, (Type{HTTP.MP4Sig}, Array{UInt8, 1}, Int64,))
    precompile(HTTP.headers, (Base.TCPSocket, HTTP.Request,))
    precompile(HTTP.sniff, (String,))
    precompile(HTTP.busy!, (HTTP.Connection{Base.TCPSocket},))
    precompile(HTTP.headers, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Request,))
    precompile(HTTP.bigend, (Array{UInt8, 1},))
    precompile(HTTP.Cookies.validcookievaluebyte, (Char,))
    precompile(HTTP.showcompact, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Response,))
    precompile(HTTP.Type, (Type{HTTP.FIFOBuffer}, Base.IOStream,))
    precompile(HTTP.ismatch, (HTTP.Masked, Array{UInt8, 1}, Int64,))
    precompile(HTTP.http_parse_host, (Array{UInt8, 1}, HTTP.Offset, Bool,))
    precompile(HTTP.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.http_host_state,))
    precompile(HTTP.isvalid, (HTTP.URI,))
    precompile(HTTP.escape, (Base.Dict{String, Any},))
    precompile(HTTP.host, (HTTP.URI,))
    precompile(HTTP.ismatch, (Type{HTTP.TextSig}, Array{UInt8, 1}, Int64,))
    precompile(HTTP.Cookies.shouldsend, (HTTP.Cookies.Cookie, Bool, String, String,))
    precompile(HTTP.Type, (Type{HTTP.FIFOBuffer}, String,))
    precompile(HTTP.busy!, (HTTP.Connection{MbedTLS.SSLContext},))
    precompile(HTTP.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Response,))
    precompile(HTTP.busy!, (HTTP.Connection{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(HTTP.startline, (Base.TTY, HTTP.Request,))
    precompile(HTTP.Cookies.parsecookievalue, (String, Bool,))
    precompile(HTTP.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Request,))
    precompile(HTTP.Cookies.pathmatch, (HTTP.Cookies.Cookie, String,))
    precompile(HTTP.unescape, (String,))
    precompile(HTTP.onheadervalue, (HTTP.Parser, HTTP.Response, Array{UInt8, 1}, Int64, Int64, Bool, String, Base.RefValue{String},))
    precompile(HTTP.headers, (Base.TTY, HTTP.Request,))
    precompile(HTTP.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.ParsingStateCode,))
    precompile(HTTP.get, (HTTP.RequestOptions, Symbol, Bool,))
    precompile(HTTP.Cookies.hasdotsuffix, (String, String,))
    precompile(HTTP.read, (HTTP.FIFOBuffer, Type{UInt8},))
    precompile(HTTP.Type, (Type{HTTP.Connection}, Base.TCPSocket,))
    precompile(HTTP.update!, (HTTP.RateLimit, Base.Rational{Int64},))
    precompile(HTTP.process!, (HTTP.Server{HTTP.http, Base.TTY}, HTTP.Parser, HTTP.Request, Int64, Base.TCPSocket, HTTP.RateLimit, Base.RefValue{Float64}, Bool,))
    precompile(HTTP.getconnections, (Type{HTTP.https}, HTTP.Client{Base.TTY}, Base.SubString{String},))
    precompile(HTTP.string, (HTTP.Response,))
    precompile(HTTP.ismatch, (HTTP.Exact, Array{UInt8, 1}, Int64,))
    precompile(HTTP.cookies, (HTTP.Response,))
    precompile(HTTP.Cookies.Type, (Type{String}, HTTP.Cookies.Cookie, Bool,))
    precompile(HTTP.reset!, (HTTP.Parser,))
    precompile(HTTP.getconn, (Type{HTTP.https}, HTTP.Client{Base.TTY}, String, HTTP.RequestOptions, Bool,))
    precompile(HTTP.history, (HTTP.Response,))
    precompile(HTTP.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.URI,))
    precompile(HTTP.show, (Base.TTY, HTTP.Request,))
    precompile(HTTP.Cookies.readsetcookie, (String, String,))
    precompile(HTTP.parse!, (HTTP.Response, HTTP.Parser, Array{UInt8, 1},))
    precompile(HTTP.write, (Base.TCPSocket, HTTP.Response, HTTP.ServerOptions,))
    precompile(HTTP.getconnections, (Type{HTTP.http}, HTTP.Client{Base.TTY}, Base.SubString{String},))
    precompile(HTTP.ismatch, (HTTP.HTMLSig, Array{UInt8, 1}, Int64,))
    precompile(HTTP.getconn, (Type{HTTP.https}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, HTTP.RequestOptions, Bool,))
    precompile(HTTP.show, (Base.TTY, HTTP.Response,))
    precompile(HTTP.ignorewhitespace, (String, Int64, Int64,))
    precompile(HTTP.getconn, (Type{HTTP.http}, HTTP.Client{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, HTTP.RequestOptions, Bool,))
    precompile(HTTP.getconn, (Type{HTTP.http}, HTTP.Client{Base.TTY}, String, HTTP.RequestOptions, Bool,))
    precompile(HTTP.escape, (String,typeof( HTTP.shouldencode),))
    precompile(HTTP.parse!, (HTTP.Request, HTTP.Parser, Array{UInt8, 1},))
    precompile(HTTP.sniff, (Array{UInt8, 1},))
    precompile(HTTP.Type, (Type{HTTP.Server}, Function, Base.TTY,))
    precompile(HTTP.status, (HTTP.Response,))
    precompile(HTTP.ignorewhitespace, (Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.eof, (HTTP.FIFOBuffer,))
    precompile(HTTP.wait, (HTTP.FIFOBuffer,))
    precompile(HTTP.request, (HTTP.Response,))
    precompile(HTTP.body, (HTTP.Response,))
    precompile(HTTP.startline, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.Request,))
    precompile(HTTP.close, (HTTP.FIFOBuffer,))
    precompile(HTTP.escape, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, String,))
    precompile(HTTP.ignorewhitespace, (Array{UInt8, 1}, UInt64, Int64,))
    precompile(HTTP.contenttype, (HTTP.Masked,))
    precompile(HTTP.headers, (HTTP.Request,))
    precompile(HTTP.onheaderfield, (HTTP.Parser, Array{UInt8, 1}, Int64, Int64,))
    precompile(HTTP.Cookies.sanitizeCookieValue, (String,))
    precompile(HTTP.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, HTTP.URI,))
    precompile(HTTP.convert, (Type{HTTP.Method}, String,))
    precompile(HTTP.bytes, (HTTP.Response,))
    precompile(HTTP.headers, (HTTP.Response,))
    precompile(HTTP.Cookies.readsetcookies, (String, Array{String, 1},))
    precompile(HTTP.contenttype, (HTTP.Exact,))
    precompile(HTTP.hasmessagebody, (HTTP.Response,))
    precompile(HTTP.statustext, (HTTP.Response,))
    precompile(HTTP.Cookies.domainandtype, (String, String,))
    precompile(HTTP.Cookies.validCookieDomain, (String,))
    precompile(HTTP.body, (MbedTLS.SSLContext, HTTP.Request, HTTP.RequestOptions,))
    precompile(HTTP.dead!, (HTTP.Connection{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(HTTP.Cookies.parsecookievalue, (Base.SubString{String}, Bool,))
    precompile(HTTP.Type, (Type{HTTP.FIFOBuffer}, HTTP.FIFOBuffer,))
    precompile(HTTP.initTLS!, (Type{HTTP.https}, Base.SubString{String}, HTTP.RequestOptions, Base.TCPSocket,))
    precompile(HTTP.body, (Base.TCPSocket, HTTP.Response, HTTP.ServerOptions,))
    precompile(HTTP.body, (Base.TCPSocket, HTTP.Request, HTTP.RequestOptions,))
    precompile(HTTP.Type, (Type{HTTP.ServerOptions},))
    precompile(HTTP.ismatch, (Type{HTTP.JSONSig}, Array{UInt8, 1}, Int64,))
    precompile(HTTP.dead!, (HTTP.Connection{MbedTLS.SSLContext},))
    precompile(HTTP.convert, (Type{HTTP.ParsingStateCode}, UInt8,))
    precompile(HTTP.sniff, (Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(HTTP.startline, (MbedTLS.SSLContext, HTTP.Request,))
    precompile(HTTP.http_should_keep_alive, (HTTP.Parser, HTTP.Response,))
    precompile(HTTP.dead!, (HTTP.Connection{Base.TCPSocket},))
    precompile(HTTP.startline, (Base.TCPSocket, HTTP.Request,))
    precompile(HTTP.serve, (HTTP.Server{HTTP.http, Base.TTY},))
    precompile(HTTP.stalebytes!, (Base.TCPSocket,))
end
